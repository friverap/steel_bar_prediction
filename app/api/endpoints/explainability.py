"""
Explainability endpoints for steel rebar price prediction
Endpoints para an√°lisis de explicabilidad y factores causales
"""

from fastapi import APIRouter, HTTPException, Depends, Request, Query
from datetime import datetime
import logging
from typing import Optional, List, Dict, Any

from app.models.prediction import FeatureImportanceResponse, CausalFactorsResponse
from app.services.predictor import SteelPricePredictor
from app.core.security import check_rate_limit, verify_api_key
from app.core.logging import api_logger
from src.ml_pipeline.prediction_cache import PredictionCache

logger = logging.getLogger(__name__)

router = APIRouter()

# Initialize predictor service
predictor = SteelPricePredictor()


@router.get("/feature-importance", response_model=FeatureImportanceResponse)
async def get_feature_importance(
    request: Request,
    model_name: Optional[str] = Query(None, description="Modelo espec√≠fico (XGBoost_V2_regime, MIDAS_V2_hibrida)"),
    top_n: int = Query(20, ge=5, le=50, description="N√∫mero de features m√°s importantes"),
    api_key: str = Depends(verify_api_key)
) -> FeatureImportanceResponse:
    """
    Obtener an√°lisis de importancia de features y factores causales
    
    Este endpoint explica qu√© factores tienen mayor influencia en la predicci√≥n
    del precio de la varilla corrugada, basado en los modelos V2 entrenados.
    
    Args:
        model_name: Modelo espec√≠fico a analizar (opcional)
        top_n: N√∫mero de features m√°s importantes a retornar
        
    Returns:
        FeatureImportanceResponse: An√°lisis de importancia con categorizaci√≥n
    """
    try:
        # Log request
        api_logger.log_request("GET", "/explainability/feature-importance", request.client.host, api_key)
        
        # Check rate limiting
        await check_rate_limit(request, api_key)
        
        logger.info(f"üìä Analizando feature importance (modelo: {model_name or 'todos'}, top: {top_n})")
        
        # RESPUESTA INSTANT√ÅNEA desde cache pre-calculado
        cache = PredictionCache()
        cached_analysis = await cache.get_cached_feature_importance()
        
        if cached_analysis and not cached_analysis.get('is_default', False):
            logger.info("‚ö° Retornando feature importance desde cache (respuesta instant√°nea)")
            
            # Filtrar por modelo espec√≠fico si se solicita
            if model_name:
                if model_name not in cached_analysis.get('models_analyzed', []):
                    raise HTTPException(
                        status_code=404,
                        detail=f"Modelo {model_name} no encontrado en an√°lisis cacheado"
                    )
                
                # Filtrar factores
                filtered_factors = []
                for factor in cached_analysis.get('top_factors', []):
                    if model_name in factor.get('models', []):
                        filtered_factors.append(factor)
                
                top_factors = filtered_factors[:top_n]
            else:
                top_factors = cached_analysis.get('top_factors', [])[:top_n]
            
            # Preparar respuesta desde cache
            response = FeatureImportanceResponse(
                models_analyzed=cached_analysis.get('models_analyzed', []),
                total_factors_analyzed=cached_analysis.get('total_factors_analyzed', 0),
                top_factors=top_factors,
                factors_by_category=cached_analysis.get('factors_by_category', {}),
                analysis_timestamp=cached_analysis.get('analysis_timestamp', datetime.now().isoformat()),
                requested_model=model_name,
                top_n_requested=top_n
            )
            
            return response
        
        # FALLBACK: Generar an√°lisis completo (m√°s lento)
        logger.info("üîÑ Cache no disponible - generando an√°lisis completo...")
        
        # Obtener an√°lisis completo del predictor
        analysis = await predictor.get_feature_importance_analysis()
        
        if 'error' in analysis:
            raise HTTPException(
                status_code=500,
                detail=f"Error en an√°lisis: {analysis['error']}"
            )
        
        # Filtrar por modelo espec√≠fico si se solicita
        if model_name:
            if model_name not in analysis.get('models_analyzed', []):
                raise HTTPException(
                    status_code=404,
                    detail=f"Modelo {model_name} no encontrado o no analizado"
                )
            
            # Filtrar factores solo de ese modelo
            filtered_factors = []
            for factor in analysis.get('top_factors', []):
                if model_name in factor.get('models', []):
                    filtered_factors.append(factor)
            
            top_factors = filtered_factors[:top_n]
        else:
            top_factors = analysis.get('top_factors', [])[:top_n]
        
        # Preparar respuesta
        response = FeatureImportanceResponse(
            models_analyzed=analysis.get('models_analyzed', []),
            total_factors_analyzed=len(analysis.get('top_factors', [])),
            top_factors=top_factors,
            factors_by_category=analysis.get('factors_by_category', {}),
            analysis_timestamp=analysis.get('analysis_timestamp', datetime.now().isoformat()),
            requested_model=model_name,
            top_n_requested=top_n
        )
        
        # Log successful analysis
        api_logger.log_request("SUCCESS", f"feature_importance_analysis_{model_name or 'all'}", request.client.host, api_key)
        
        return response
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error en an√°lisis de feature importance: {str(e)}", exc_info=True)
        api_logger.log_error(e, "feature_importance_analysis")
        
        raise HTTPException(
            status_code=500,
            detail="Error generando an√°lisis de importancia de features"
        )


@router.get("/causal-factors", response_model=CausalFactorsResponse)
async def get_causal_factors(
    request: Request,
    category: Optional[str] = Query(None, description="Categor√≠a espec√≠fica (Autorregresivo, Materias Primas, etc.)"),
    min_importance: float = Query(0.01, ge=0.0, le=1.0, description="Importancia m√≠nima (0.0-1.0)"),
    api_key: str = Depends(verify_api_key)
) -> CausalFactorsResponse:
    """
    Obtener factores causales que influyen en el precio de la varilla
    
    Este endpoint proporciona una explicaci√≥n detallada de los factores econ√≥micos
    y t√©cnicos que causan cambios en el precio de la varilla corrugada.
    
    Args:
        category: Filtrar por categor√≠a espec√≠fica
        min_importance: Importancia m√≠nima para incluir factores
        
    Returns:
        CausalFactorsResponse: Factores causales con explicaciones econ√≥micas
    """
    try:
        # Log request
        api_logger.log_request("GET", "/explainability/causal-factors", request.client.host, api_key)
        
        # Check rate limiting
        await check_rate_limit(request, api_key)
        
        logger.info(f"üîç Analizando factores causales (categor√≠a: {category}, min_importance: {min_importance})")
        
        # Obtener an√°lisis completo
        analysis = await predictor.get_feature_importance_analysis()
        
        if 'error' in analysis:
            raise HTTPException(
                status_code=500,
                detail=f"Error en an√°lisis: {analysis['error']}"
            )
        
        # Filtrar factores seg√∫n criterios
        all_factors = analysis.get('top_factors', [])
        
        # Filtrar por importancia m√≠nima
        filtered_factors = [f for f in all_factors if f.get('average_importance', 0) >= min_importance]
        
        # Filtrar por categor√≠a si se especifica
        if category:
            filtered_factors = [f for f in filtered_factors if f.get('category') == category]
        
        # Obtener categor√≠as disponibles
        factors_by_category = analysis.get('factors_by_category', {})
        available_categories = list(factors_by_category.keys())
        
        # Crear explicaciones causales detalladas
        causal_explanations = []
        
        for factor in filtered_factors[:15]:  # Top 15 factores causales
            explanation = _create_causal_explanation(factor)
            causal_explanations.append(explanation)
        
        # Preparar respuesta
        response = CausalFactorsResponse(
            total_factors_analyzed=len(all_factors),
            factors_returned=len(causal_explanations),
            causal_factors=causal_explanations,
            available_categories=available_categories,
            filter_applied={
                'category': category,
                'min_importance': min_importance
            },
            economic_context=_get_economic_context(),
            analysis_timestamp=analysis.get('analysis_timestamp', datetime.now().isoformat())
        )
        
        return response
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error en an√°lisis de factores causales: {str(e)}", exc_info=True)
        api_logger.log_error(e, "causal_factors_analysis")
        
        raise HTTPException(
            status_code=500,
            detail="Error generando an√°lisis de factores causales"
        )


def _create_causal_explanation(factor: Dict[str, Any]) -> Dict[str, Any]:
    """
    Crear explicaci√≥n causal detallada para un factor
    """
    feature_name = factor['feature']
    importance = factor['average_importance']
    category = factor['category']
    
    # Explicaciones causales espec√≠ficas
    causal_explanations = {
        'precio_varilla_lme_lag_1': {
            'mechanism': 'Inercia de precios',
            'economic_rationale': 'Los precios tienden a seguir tendencias debido a contratos a plazo y expectativas de mercado',
            'impact_direction': 'Positiva (precios altos tienden a mantenerse)',
            'time_horizon': 'Inmediato (1 d√≠a)'
        },
        'iron': {
            'mechanism': 'Costo de materia prima',
            'economic_rationale': 'El mineral de hierro representa ~70% del costo de producci√≥n del acero',
            'impact_direction': 'Positiva (mayor costo de hierro ‚Üí mayor precio de acero)',
            'time_horizon': 'Corto plazo (1-5 d√≠as)'
        },
        'coking': {
            'mechanism': 'Costo de materia prima',
            'economic_rationale': 'El carb√≥n de coque es esencial para la producci√≥n de acero en altos hornos',
            'impact_direction': 'Positiva (mayor costo de carb√≥n ‚Üí mayor precio de acero)',
            'time_horizon': 'Corto plazo (1-5 d√≠as)'
        },
        'VIX': {
            'mechanism': 'Aversi√≥n al riesgo',
            'economic_rationale': 'Alta volatilidad reduce demanda de commodities como refugio seguro',
            'impact_direction': 'Negativa (mayor VIX ‚Üí menor precio de commodities)',
            'time_horizon': 'Inmediato (mismo d√≠a)'
        },
        'sp500': {
            'mechanism': 'Condiciones macroecon√≥micas',
            'economic_rationale': 'Mercados alcistas indican crecimiento econ√≥mico y mayor demanda de acero',
            'impact_direction': 'Positiva (mayor S&P 500 ‚Üí mayor demanda de acero)',
            'time_horizon': 'Mediano plazo (5-20 d√≠as)'
        },
        'tipo_cambio_usdmxn': {
            'mechanism': 'Competitividad comercial',
            'economic_rationale': 'Peso d√©bil hace m√°s caro importar materias primas pero m√°s competitivo exportar',
            'impact_direction': 'Compleja (depende del balance importaci√≥n/exportaci√≥n)',
            'time_horizon': 'Corto plazo (1-3 d√≠as)'
        }
    }
    
    # Obtener explicaci√≥n espec√≠fica o crear gen√©rica
    if feature_name in causal_explanations:
        causal_info = causal_explanations[feature_name]
    else:
        # Explicaci√≥n gen√©rica basada en categor√≠a
        causal_info = _get_generic_causal_explanation(category)
    
    return {
        'factor_name': feature_name,
        'importance_score': importance,
        'category': category,
        'causal_mechanism': causal_info['mechanism'],
        'economic_rationale': causal_info['economic_rationale'],
        'impact_direction': causal_info['impact_direction'],
        'time_horizon': causal_info['time_horizon'],
        'description': factor.get('description', feature_name)
    }


def _get_generic_causal_explanation(category: str) -> Dict[str, str]:
    """Obtener explicaci√≥n causal gen√©rica por categor√≠a"""
    
    generic_explanations = {
        'Autorregresivo': {
            'mechanism': 'Persistencia temporal',
            'economic_rationale': 'Los precios muestran inercia debido a contratos, expectativas y costos de ajuste',
            'impact_direction': 'Positiva (continuidad de tendencias)',
            'time_horizon': 'Muy corto plazo (1-2 d√≠as)'
        },
        'Materias Primas': {
            'mechanism': 'Transmisi√≥n de costos',
            'economic_rationale': 'Los costos de materias primas se transmiten directamente al precio final',
            'impact_direction': 'Positiva (mayor costo ‚Üí mayor precio)',
            'time_horizon': 'Corto plazo (1-10 d√≠as)'
        },
        'Mercados Financieros': {
            'mechanism': 'Sentimiento y liquidez',
            'economic_rationale': 'Los mercados financieros reflejan expectativas y disponibilidad de capital',
            'impact_direction': 'Variable (depende del contexto)',
            'time_horizon': 'Inmediato a corto plazo'
        },
        'Tipo de Cambio': {
            'mechanism': 'Competitividad y costos',
            'economic_rationale': 'Afecta costos de importaci√≥n y competitividad exportadora',
            'impact_direction': 'Compleja (balance comercial)',
            'time_horizon': 'Corto plazo (1-5 d√≠as)'
        },
        'Tasas de Inter√©s': {
            'mechanism': 'Costo de capital',
            'economic_rationale': 'Afecta costos de financiamiento y demanda de inversi√≥n',
            'impact_direction': 'Negativa (mayor tasa ‚Üí menor demanda)',
            'time_horizon': 'Mediano plazo (10-30 d√≠as)'
        },
        'Indicadores T√©cnicos': {
            'mechanism': 'Se√±ales de mercado',
            'economic_rationale': 'Capturan patrones t√©cnicos y momentum de precios',
            'impact_direction': 'Variable (seg√∫n indicador)',
            'time_horizon': 'Muy corto plazo (1-5 d√≠as)'
        }
    }
    
    return generic_explanations.get(category, {
        'mechanism': 'Factor espec√≠fico',
        'economic_rationale': 'Influencia particular en el mercado de acero',
        'impact_direction': 'Variable',
        'time_horizon': 'Variable'
    })


def _get_economic_context() -> Dict[str, str]:
    """Obtener contexto econ√≥mico general para la explicaci√≥n"""
    return {
        'market_structure': 'El mercado de varilla corrugada est√° influenciado por costos de materias primas, condiciones macroecon√≥micas y factores t√©cnicos de mercado',
        'price_formation': 'Los precios se forman a trav√©s de la interacci√≥n entre costos de producci√≥n (hierro, carb√≥n), demanda (construcci√≥n), y condiciones financieras globales',
        'key_relationships': 'Relaciones causales principales: Materias Primas ‚Üí Costos ‚Üí Precios; Macro ‚Üí Demanda ‚Üí Precios; T√©cnico ‚Üí Momentum ‚Üí Precios',
        'prediction_horizon': 'Los modelos est√°n optimizados para predicci√≥n del precio de cierre del d√≠a siguiente (t+1)',
        'model_approach': 'Combinaci√≥n de modelos MIDAS (frecuencias mixtas) y XGBoost (no-linealidades) para capturar diferentes aspectos causales'
    }


@router.get("/causal-chain")
async def get_causal_chain(
    request: Request,
    factor: str = Query(..., description="Factor espec√≠fico a analizar"),
    api_key: str = Depends(verify_api_key)
):
    """
    Obtener cadena causal detallada para un factor espec√≠fico
    
    Explica c√≥mo un factor espec√≠fico influye en el precio de la varilla
    a trav√©s de mecanismos econ√≥micos espec√≠ficos.
    
    Args:
        factor: Nombre del factor a analizar
        
    Returns:
        Cadena causal detallada con mecanismos de transmisi√≥n
    """
    try:
        # Check rate limiting
        await check_rate_limit(request, api_key)
        
        logger.info(f"üîó Analizando cadena causal para: {factor}")
        
        # Obtener an√°lisis de feature importance
        analysis = await predictor.get_feature_importance_analysis()
        
        # Buscar el factor espec√≠fico
        factor_info = None
        for f in analysis.get('top_factors', []):
            if f['feature'].lower() == factor.lower():
                factor_info = f
                break
        
        if not factor_info:
            raise HTTPException(
                status_code=404,
                detail=f"Factor '{factor}' no encontrado en el an√°lisis"
            )
        
        # Crear cadena causal detallada
        causal_chain = _create_detailed_causal_chain(factor_info)
        
        return {
            'factor': factor,
            'importance_score': factor_info['average_importance'],
            'category': factor_info['category'],
            'causal_chain': causal_chain,
            'models_using_factor': factor_info.get('models', []),
            'analysis_timestamp': datetime.now().isoformat()
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error en an√°lisis de cadena causal: {str(e)}", exc_info=True)
        raise HTTPException(
            status_code=500,
            detail="Error analizando cadena causal"
        )


def _create_detailed_causal_chain(factor_info: Dict[str, Any]) -> List[Dict[str, str]]:
    """
    Crear cadena causal detallada para un factor
    """
    factor_name = factor_info['feature']
    category = factor_info['category']
    
    # Cadenas causales espec√≠ficas por factor
    causal_chains = {
        'iron': [
            {'step': 1, 'mechanism': 'Costo de Materia Prima', 'description': 'Aumento en precio del mineral de hierro'},
            {'step': 2, 'mechanism': 'Transmisi√≥n de Costos', 'description': 'Incremento en costos de producci√≥n de acero'},
            {'step': 3, 'mechanism': 'Ajuste de Precios', 'description': 'Productores ajustan precios para mantener m√°rgenes'},
            {'step': 4, 'mechanism': 'Impacto Final', 'description': 'Aumento en precio de varilla corrugada'}
        ],
        'coking': [
            {'step': 1, 'mechanism': 'Insumo Cr√≠tico', 'description': 'Cambio en precio del carb√≥n de coque'},
            {'step': 2, 'mechanism': 'Proceso Sider√∫rgico', 'description': 'Impacto en costos de producci√≥n en altos hornos'},
            {'step': 3, 'mechanism': 'Estructura de Costos', 'description': 'Ajuste en estructura de costos de acer√≠a'},
            {'step': 4, 'mechanism': 'Precio Final', 'description': 'Reflejo en precio de productos de acero'}
        ],
        'VIX': [
            {'step': 1, 'mechanism': 'Aversi√≥n al Riesgo', 'description': 'Aumento en volatilidad impl√≠cita del mercado'},
            {'step': 2, 'mechanism': 'Flight to Quality', 'description': 'Inversores buscan activos seguros'},
            {'step': 3, 'mechanism': 'Reducci√≥n de Demanda', 'description': 'Menor demanda especulativa de commodities'},
            {'step': 4, 'mechanism': 'Presi√≥n Bajista', 'description': 'Presi√≥n a la baja en precios de materias primas'}
        ],
        'sp500': [
            {'step': 1, 'mechanism': 'Indicador Macroecon√≥mico', 'description': 'S&P 500 refleja salud econ√≥mica general'},
            {'step': 2, 'mechanism': 'Expectativas de Crecimiento', 'description': 'Mercados alcistas indican crecimiento esperado'},
            {'step': 3, 'mechanism': 'Demanda de Infraestructura', 'description': 'Mayor crecimiento ‚Üí mayor demanda de construcci√≥n'},
            {'step': 4, 'mechanism': 'Demanda de Acero', 'description': 'Incremento en demanda de productos de acero'}
        ]
    }
    
    # Usar cadena espec√≠fica o crear gen√©rica
    if factor_name in causal_chains:
        return causal_chains[factor_name]
    else:
        return _create_generic_causal_chain(category, factor_name)


def _create_generic_causal_chain(category: str, factor_name: str) -> List[Dict[str, str]]:
    """Crear cadena causal gen√©rica basada en categor√≠a"""
    
    generic_chains = {
        'Autorregresivo': [
            {'step': 1, 'mechanism': 'Persistencia', 'description': f'{factor_name} muestra continuidad temporal'},
            {'step': 2, 'mechanism': 'Expectativas', 'description': 'Formaci√≥n de expectativas basadas en historia reciente'},
            {'step': 3, 'mechanism': 'Comportamiento', 'description': 'Agentes act√∫an seg√∫n expectativas formadas'},
            {'step': 4, 'mechanism': 'Autorealizaci√≥n', 'description': 'Las expectativas se vuelven realidad'}
        ],
        'Materias Primas': [
            {'step': 1, 'mechanism': 'Cambio de Costo', 'description': f'Variaci√≥n en costo de {factor_name}'},
            {'step': 2, 'mechanism': 'Transmisi√≥n', 'description': 'Transmisi√≥n a trav√©s de la cadena productiva'},
            {'step': 3, 'mechanism': 'Ajuste de M√°rgenes', 'description': 'Productores ajustan precios para mantener rentabilidad'},
            {'step': 4, 'mechanism': 'Precio Final', 'description': 'Impacto en precio final de varilla'}
        ],
        'Mercados Financieros': [
            {'step': 1, 'mechanism': 'Se√±al de Mercado', 'description': f'{factor_name} env√≠a se√±al sobre condiciones'},
            {'step': 2, 'mechanism': 'Sentimiento', 'description': 'Cambio en sentimiento de inversores'},
            {'step': 3, 'mechanism': 'Flujos de Capital', 'description': 'Reasignaci√≥n de capital entre activos'},
            {'step': 4, 'mechanism': 'Impacto en Commodities', 'description': 'Efecto en precios de materias primas'}
        ]
    }
    
    return generic_chains.get(category, [
        {'step': 1, 'mechanism': 'Factor Espec√≠fico', 'description': f'Influencia de {factor_name}'},
        {'step': 2, 'mechanism': 'Transmisi√≥n', 'description': 'Mecanismo de transmisi√≥n al mercado'},
        {'step': 3, 'mechanism': 'Ajuste de Mercado', 'description': 'Respuesta del mercado al cambio'},
        {'step': 4, 'mechanism': 'Impacto Final', 'description': 'Efecto en precio de varilla'}
    ])


@router.get("/model-comparison")
async def get_model_comparison(
    request: Request,
    api_key: str = Depends(verify_api_key)
):
    """
    Comparar performance y caracter√≠sticas de los modelos V2 disponibles
    
    Returns:
        Comparaci√≥n detallada entre XGBoost_V2_regime y MIDAS_V2_hibrida
    """
    try:
        # Check rate limiting
        await check_rate_limit(request, api_key)
        
        logger.info("üìä Generando comparaci√≥n de modelos V2...")
        
        # Obtener informaci√≥n de modelos
        model_factory = predictor.production_predictor.model_factory
        available_models = model_factory.list_available_models()
        
        if not available_models:
            raise HTTPException(
                status_code=404,
                detail="No hay modelos V2 disponibles para comparar"
            )
        
        # Comparar modelos
        model_comparison = {}
        
        for model_name in available_models:
            model_info = model_factory.get_model_info(model_name)
            feature_importance = model_factory.get_feature_importance(model_name)
            
            model_comparison[model_name] = {
                'description': model_info.get('description', ''),
                'type': model_info.get('type', ''),
                'variables_used': model_info.get('variables', []),
                'test_metrics': model_info.get('test_metrics', {}),
                'top_5_features': feature_importance[:5],
                'strengths': _get_model_strengths(model_name),
                'use_cases': _get_model_use_cases(model_name)
            }
        
        return {
            'models_compared': list(model_comparison.keys()),
            'comparison': model_comparison,
            'recommendation': _get_model_recommendation(model_comparison),
            'comparison_timestamp': datetime.now().isoformat()
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error en comparaci√≥n de modelos: {str(e)}", exc_info=True)
        raise HTTPException(
            status_code=500,
            detail="Error generando comparaci√≥n de modelos"
        )


def _get_model_strengths(model_name: str) -> List[str]:
    """Obtener fortalezas espec√≠ficas de cada modelo"""
    strengths = {
        'XGBoost_V2_regime': [
            'Excelente para capturar relaciones no-lineales',
            'Robusto a cambios de r√©gimen de mercado',
            'Manejo autom√°tico de interacciones entre variables',
            'Alta precisi√≥n en condiciones de mercado vol√°tiles'
        ],
        'MIDAS_V2_hibrida': [
            'Combina variables autorregresivas y fundamentales',
            'Excelente para capturar tendencias de mediano plazo',
            'Manejo sofisticado de frecuencias mixtas',
            'Alta estabilidad en predicciones'
        ]
    }
    
    return strengths.get(model_name, ['Modelo especializado para predicci√≥n de precios'])


def _get_model_use_cases(model_name: str) -> List[str]:
    """Obtener casos de uso recomendados para cada modelo"""
    use_cases = {
        'XGBoost_V2_regime': [
            'Per√≠odos de alta volatilidad de mercado',
            'Cambios s√∫bitos en condiciones macroecon√≥micas',
            'Detecci√≥n de cambios de r√©gimen',
            'Predicciones en mercados no-lineales'
        ],
        'MIDAS_V2_hibrida': [
            'Condiciones de mercado estables',
            'Predicciones de tendencia a mediano plazo',
            'Integraci√≥n de datos de m√∫ltiples frecuencias',
            'An√°lisis fundamental de mercado'
        ]
    }
    
    return use_cases.get(model_name, ['Predicci√≥n general de precios'])


def _get_model_recommendation(model_comparison: Dict[str, Any]) -> Dict[str, str]:
    """Generar recomendaci√≥n de uso de modelos"""
    
    # Comparar m√©tricas si est√°n disponibles
    best_mape = float('inf')
    best_r2 = -1
    best_model_mape = None
    best_model_r2 = None
    
    for model_name, info in model_comparison.items():
        metrics = info.get('test_metrics', {})
        
        mape = metrics.get('mape', float('inf'))
        r2 = metrics.get('r2', -1)
        
        if mape < best_mape:
            best_mape = mape
            best_model_mape = model_name
        
        if r2 > best_r2:
            best_r2 = r2
            best_model_r2 = model_name
    
    return {
        'primary_recommendation': best_model_r2 or 'XGBoost_V2_regime',
        'reasoning': f'Mejor R¬≤ ({best_r2:.3f}) y MAPE ({best_mape:.2f}%)',
        'alternative': 'Usar ambos modelos y promediar predicciones para mayor robustez',
        'context_dependent': 'XGBoost para mercados vol√°tiles, MIDAS para condiciones estables'
    }
